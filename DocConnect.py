import os
import tkinter as tk
from tkinter import messagebox, filedialog
import threading
from PyPDF2 import PdfReader, PdfWriter
import customtkinter as ctk
from PIL import Image
import sys


class PDFMergerApp:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("blue")

        self.root = ctk.CTk()
        self.root.title("PDF Merger - –ó–∞–º–µ–Ω–∞ —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤")
        self.root.geometry("800x600")
        self.root.resizable(True, True)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π
        self.titles_folder = tk.StringVar()
        self.reports_folder = tk.StringVar()
        self.output_folder = tk.StringVar()

        self.is_processing = False
        self.setup_ui()

    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            main_frame,
            text="–ó–∞–º–µ–Ω–∞ —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –≤ PDF",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=(0, 30))

        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫
        folders_frame = ctk.CTkFrame(main_frame)
        folders_frame.pack(fill="x", pady=(0, 20))

        # –ü–∞–ø–∫–∞ —Å —Ç–∏—Ç—É–ª–∞–º–∏
        self.create_folder_selector(
            folders_frame,
            "–ü–∞–ø–∫–∞ —Å —Ç–∏—Ç—É–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏:",
            self.titles_folder,
            0
        )

        # –ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏
        self.create_folder_selector(
            folders_frame,
            "–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ PDF:",
            self.reports_folder,
            1
        )

        # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.create_folder_selector(
            folders_frame,
            "–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
            self.output_folder,
            2
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(main_frame)
        buttons_frame.pack(fill="x", pady=(0, 20))

        self.process_btn = ctk.CTkButton(
            buttons_frame,
            text="–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
            command=self.start_processing,
            font=ctk.CTkFont(size=16),
            height=40
        )
        self.process_btn.pack(side="left", padx=(0, 10))

        self.clear_btn = ctk.CTkButton(
            buttons_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
            command=self.clear_all,
            font=ctk.CTkFont(size=16),
            fg_color="#D35B58",
            hover_color="#C04B48",
            height=40
        )
        self.clear_btn.pack(side="left")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ctk.CTkProgressBar(main_frame)
        self.progress.pack(fill="x", pady=(0, 10))
        self.progress.set(0)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = ctk.CTkLabel(
            main_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=ctk.CTkFont(size=14)
        )
        self.status_label.pack(pady=(0, 20))

        # –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        log_label = ctk.CTkLabel(
            main_frame,
            text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        log_label.pack(anchor="w")

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∞
        self.log_text = ctk.CTkTextbox(
            main_frame,
            height=200,
            font=ctk.CTkFont(family="Consolas", size=12)
        )
        self.log_text.pack(fill="both", expand=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
        self.log("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É'.")

    def create_folder_selector(self, parent, label_text, variable, row):
        frame = ctk.CTkFrame(parent)
        frame.pack(fill="x", pady=5)

        label = ctk.CTkLabel(frame, text=label_text, font=ctk.CTkFont(size=14))
        label.pack(anchor="w", pady=(5, 2))

        entry_frame = ctk.CTkFrame(frame, fg_color="transparent")
        entry_frame.pack(fill="x")

        entry = ctk.CTkEntry(
            entry_frame,
            textvariable=variable,
            font=ctk.CTkFont(size=12),
            height=35
        )
        entry.pack(side="left", fill="x", expand=True, padx=(0, 10))

        browse_btn = ctk.CTkButton(
            entry_frame,
            text="–û–±–∑–æ—Ä",
            command=lambda: self.browse_folder(variable),
            width=80,
            height=35
        )
        browse_btn.pack(side="right")

    def browse_folder(self, variable):
        folder = filedialog.askdirectory()
        if folder:
            variable.set(folder)

    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_text.insert("end", f"{message}\n")
        self.log_text.see("end")
        self.root.update_idletasks()

    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è"""
        self.titles_folder.set("")
        self.reports_folder.set("")
        self.output_folder.set("")
        self.log_text.delete("1.0", "end")
        self.progress.set(0)
        self.status_label.configure(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.log("–í—Å–µ –ø–æ–ª—è –æ—á–∏—â–µ–Ω—ã. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ.")

    def validate_inputs(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.titles_folder.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ç–∏—Ç—É–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏")
            return False

        if not self.reports_folder.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ PDF")
            return False

        if not self.output_folder.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False

        if not os.path.exists(self.titles_folder.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ —Å —Ç–∏—Ç—É–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        if not os.path.exists(self.reports_folder.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ PDF –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        return True

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_processing:
            return

        if not self.validate_inputs():
            return

        self.is_processing = True
        self.process_btn.configure(state="disabled")
        self.clear_btn.configure(state="disabled")
        self.progress.set(0)

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.process_pdfs)
        thread.daemon = True
        thread.start()

    def process_pdfs(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF"""
        try:
            folder_titles = self.titles_folder.get()
            folder_reports = self.reports_folder.get()
            folder_output = self.output_folder.get()

            os.makedirs(folder_output, exist_ok=True)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤
            pdf_files = [f for f in os.listdir(folder_titles) if f.lower().endswith(".pdf")]
            total_files = len(pdf_files)

            if total_files == 0:
                self.log("‚ùå –í –ø–∞–ø–∫–µ —Å —Ç–∏—Ç—É–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤")
                return

            self.log(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_files}")

            processed = 0
            errors = 0

            for filename in pdf_files:
                try:
                    self.status_label.configure(text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {filename}")
                    self.log(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {filename}")

                    title_path = os.path.join(folder_titles, filename)
                    report_path = os.path.join(folder_reports, filename)

                    if not os.path.exists(report_path):
                        self.log(f"‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                        errors += 1
                        continue

                    # –ß–∏—Ç–∞–µ–º —Ç–∏—Ç—É–ª –∏ –æ—Ç—á–µ—Ç
                    title_reader = PdfReader(title_path)
                    report_reader = PdfReader(report_path)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–∏—Ç—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if len(title_reader.pages) != 1:
                        self.log(f"‚ö†Ô∏è –í —Ç–∏—Ç—É–ª–µ {filename} –Ω–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞–π–¥–µ–Ω–æ {len(title_reader.pages)})")
                        errors += 1
                        continue

                    writer = PdfWriter()

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ç—É–ª
                    writer.add_page(title_reader.pages[0])

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–∞
                    for page in report_reader.pages[1:]:
                        writer.add_page(page)

                    output_path = os.path.join(folder_output, filename)
                    with open(output_path, "wb") as f_out:
                        writer.write(f_out)

                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {filename}")
                    processed += 1

                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {str(e)}")
                    errors += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed += 1
                progress_value = processed / total_files
                self.progress.set(progress_value)

            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.status_label.configure(text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.log("=" * 50)
            self.log(f"üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} —Ñ–∞–π–ª–æ–≤")
            self.log(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
            self.log(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {folder_output}")

        except Exception as e:
            self.log(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}")

        finally:
            self.is_processing = False
            self.process_btn.configure(state="normal")
            self.clear_btn.configure(state="normal")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()


def main():
    try:
        app = PDFMergerApp()
        app.run()
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{str(e)}")


if __name__ == "__main__":
    main()